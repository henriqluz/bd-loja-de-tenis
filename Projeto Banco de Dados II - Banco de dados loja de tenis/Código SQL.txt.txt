use bd_loja_de_tenis;

CREATE TABLE Usuario (
    id_usuario INT PRIMARY KEY,
    nome VARCHAR(255),
    email VARCHAR(255),
    senha VARCHAR(255),
    cpf INT,
    cep INT,
    estado VARCHAR(255),
    cidade VARCHAR(255),
    bairro VARCHAR(255),
    rua VARCHAR(255),
    numero INT
);

CREATE TABLE Marca (
    nome_marca VARCHAR(255) PRIMARY KEY,
    descricao_marca VARCHAR(255)
);

CREATE TABLE Boleto (
    id_boleto INT PRIMARY KEY,
    data_vencimento DATE,
    data_pagamento DATE
);

CREATE TABLE CartaoCredito (
    id_cartaocredito INT PRIMARY KEY,
    parcelas INT
);

CREATE TABLE Pagamento (
    id_pagamento INT PRIMARY KEY,
    estado_pagamento VARCHAR(255),
    valor DOUBLE,
    id_boleto INT,
    id_cartaocredito INT,
    FOREIGN KEY (id_boleto) REFERENCES Boleto (id_boleto),
    FOREIGN KEY (id_cartaocredito) REFERENCES CartaoCredito (id_cartaocredito)
);

CREATE TABLE Produto (
    id_produto INT PRIMARY KEY,
    nome_produto VARCHAR(255),
    qtd INT,
    preco DOUBLE,
    tamanho INT,
    cor VARCHAR(255),
    tipo VARCHAR(255),
    descricao VARCHAR(255),
    nome_marca VARCHAR(255),
    FOREIGN KEY (nome_marca) REFERENCES Marca (nome_marca)
);

CREATE TABLE Carrinho (
    id_carrinho INT PRIMARY KEY,
    total_carrinho DOUBLE,
    lista_itens INT,
    qtd_itens INT,
    id_produto INT,
    FOREIGN KEY (id_produto) REFERENCES Produto (id_produto)
);

CREATE TABLE Loja_fisica (
    id_loja INT PRIMARY KEY,
    nome_loja VARCHAR(255),
    telefone_loja INT,
    cep_loja INT,
    estado_loja VARCHAR(255),
    cidade_loja VARCHAR(255),
    bairro_loja VARCHAR(255),
    rua_loja VARCHAR(255),
    numero_loja INT,
    url VARCHAR(255)
);

CREATE TABLE Pedido (
    numero_pedido INT PRIMARY KEY,
    id_usuario INT,
    para_regiao VARCHAR(255),
    para_cidade VARCHAR(255),
    para_cep VARCHAR(10),
    para_rua VARCHAR(255),
    data_compra DATE,
    data_envio DATE,
    id_pagamento INT,
    id_carrinho INT,
    id_loja INT,
    FOREIGN KEY (id_usuario) REFERENCES Usuario (id_usuario),
    FOREIGN KEY (id_pagamento) REFERENCES Pagamento (id_pagamento),
    FOREIGN KEY (id_carrinho) REFERENCES Carrinho (id_carrinho),
    FOREIGN KEY (id_loja) REFERENCES Loja_fisica (id_loja)
);

CREATE TABLE loja_online (
    url VARCHAR(255) PRIMARY KEY,
    numero_pedido INT,
    FOREIGN KEY (numero_pedido) REFERENCES Pedido (numero_pedido)
);

CREATE TABLE Funcionario (
    id_funcionario INT PRIMARY KEY,
    id_loja INT,
    nome_funcionario VARCHAR(255),
    cpf_funcionario INT,
    email_funcionario VARCHAR(255),
    telefone_funcionario INT,
    cargo VARCHAR(255),
    salario DOUBLE,
    data_contratacao DATE,
    FOREIGN KEY (id_loja) REFERENCES Loja_fisica (id_loja)
);

CREATE TABLE Fornecedor (
    id_fornecedor INT PRIMARY KEY,
    nome_fornecedor VARCHAR(255),
    telefone_fornecedor INT
);

CREATE TABLE Estoque (
    id_estoque INT PRIMARY KEY,
    qtd_estoque INT,
    id_fornecedor INT,
    id_produto INT,
    id_loja INT,
    FOREIGN KEY (id_fornecedor) REFERENCES Fornecedor (id_fornecedor),
    FOREIGN KEY (id_produto) REFERENCES Produto (id_produto),
    FOREIGN KEY (id_loja) REFERENCES Loja_fisica (id_loja)
);

CREATE TABLE Log (
    id_log INT PRIMARY KEY AUTO_INCREMENT,
    descricao VARCHAR(255),
    data_registro DATETIME
);



use bd_loja_de_tenis;

-- triggers
DELIMITER //
CREATE TRIGGER novo_usuario
AFTER INSERT ON Usuario
FOR EACH ROW
BEGIN
    INSERT INTO Log (descricao) VALUES (CONCAT('Novo usuário com ID ', NEW.id_usuario, ' foi criado.'));
END;
//

DELIMITER //
CREATE TRIGGER deletar_produto
BEFORE DELETE ON Produto
FOR EACH ROW
BEGIN
    INSERT INTO Log (descricao) VALUES (CONCAT('Produto com ID ', OLD.id_produto, ' foi excluído.'));
END;
//

DELIMITER //
CREATE TRIGGER atualizar_pagamento
AFTER UPDATE ON Pagamento
FOR EACH ROW
BEGIN
    INSERT INTO Log (descricao) VALUES (CONCAT('Pagamento com ID ', NEW.id_pagamento, ' foi atualizado.'));
END;
//

DELIMITER //
CREATE TRIGGER novo_pedido
AFTER INSERT ON Pedido
FOR EACH ROW
BEGIN
    INSERT INTO Log (descricao) VALUES (CONCAT('Novo pedido com número ', NEW.numero_pedido, ' foi criado.'));
END;
//

DELIMITER //
CREATE TRIGGER deletar_carrinho
BEFORE DELETE ON Carrinho
FOR EACH ROW
BEGIN
    INSERT INTO Log (descricao) VALUES (CONCAT('Carrinho com ID ', OLD.id_carrinho, ' foi excluído.'));
END;
//

use bd_loja_de_tenis;
-- procedures

DELIMITER //
CREATE PROCEDURE InserirUsuario(IN id INT, IN nome VARCHAR(255), IN email VARCHAR(255), IN senha VARCHAR(255), IN cpf VARCHAR(255), IN cep INT, IN estado VARCHAR(255), IN cidade VARCHAR(255), IN bairro VARCHAR(255), IN rua VARCHAR(255), IN numero INT)
BEGIN
    INSERT INTO Usuario (id_usuario, nome, email, senha, cpf, cep, estado, cidade, bairro, rua, numero) VALUES (id, nome, email, senha, cpf, cep, estado, cidade, bairro, rua, numero);
END;
//

DELIMITER //
CREATE PROCEDURE AtualizarEstadoPagamento(IN id INT, IN estado VARCHAR(255))
BEGIN
    UPDATE Pagamento SET estado_pagamento = estado WHERE id_pagamento = id;
END;
//

DELIMITER //
CREATE PROCEDURE DeletarProduto(IN id INT)
BEGIN
    DELETE FROM Produto WHERE id_produto = id;
END;
//

DELIMITER //
CREATE PROCEDURE InserirPedido(IN numero INT, IN id_usuario INT, IN regiao VARCHAR(255), IN cidade VARCHAR(255), IN cep VARCHAR(10), IN rua VARCHAR(255), IN data_compra DATE, IN data_envio DATE, IN id_pagamento INT, IN id_carrinho INT, IN id_loja INT)
BEGIN
    INSERT INTO Pedido (numero_pedido, id_usuario, para_regiao, para_cidade, para_cep, para_rua, data_compra, data_envio, id_pagamento, id_carrinho, id_loja) VALUES (numero, id_usuario, regiao, cidade, cep, rua, data_compra, data_envio, id_pagamento, id_carrinho, id_loja);
END;
//

DELIMITER //
CREATE PROCEDURE DeletarCarrinho(IN id INT)
BEGIN
    DELETE FROM Carrinho WHERE id_carrinho = id;
END;
//
use bd_loja_de_tenis;
-- cursores

-- Cursor para Usuario
DELIMITER //
CREATE PROCEDURE usuario_cursor()
BEGIN
  DECLARE done INT DEFAULT FALSE;
  DECLARE nome_usuario VARCHAR(255);
  DECLARE email_usuario VARCHAR(255);
  DECLARE cur CURSOR FOR SELECT nome, email FROM Usuario;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

  OPEN cur;

  read_loop: LOOP
    FETCH cur INTO nome_usuario, email_usuario;

    IF done THEN
      LEAVE read_loop;
    END IF;

    -- Faça algo com os dados, como imprimir na console
    SELECT CONCAT('Nome: ', nome_usuario, ', Email: ', email_usuario) AS 'Dados';
  END LOOP;

  CLOSE cur;
END//
DELIMITER ;
-- Cursor para Funcionario
DELIMITER //
CREATE PROCEDURE funcionario_cursor()
BEGIN
  DECLARE done INT DEFAULT FALSE;
  DECLARE salario_funcionario DECIMAL(10,2);
  DECLARE soma_salarios DECIMAL(10,2) DEFAULT 0;
  DECLARE contador INT DEFAULT 0;
  DECLARE media_salarios DECIMAL(10,2);
  DECLARE cur CURSOR FOR SELECT salario FROM Funcionario;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

  OPEN cur;

  read_loop: LOOP
    FETCH cur INTO salario_funcionario;

    IF done THEN
      LEAVE read_loop;
    END IF;

    -- Adiciona o salário à soma
    SET soma_salarios = soma_salarios + salario_funcionario;
    SET contador = contador + 1;
  END LOOP;

  -- Calcula a média
  SET media_salarios = soma_salarios / contador;

  SELECT media_salarios AS 'Média de Salários';

  CLOSE cur;
END//
DELIMITER ;

-- Cursor para Estoque
DELIMITER //
CREATE PROCEDURE estoque_cursor()
BEGIN
  DECLARE done INT DEFAULT FALSE;
  DECLARE nome_produto VARCHAR(255);
  DECLARE qtd_estoque INT;
  DECLARE cur CURSOR FOR SELECT p.nome_produto, e.qtd_estoque FROM Produto p JOIN Estoque e ON p.id_produto = e.id_produto WHERE e.qtd_estoque < 10;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

  OPEN cur;

  read_loop: LOOP
    FETCH cur INTO nome_produto, qtd_estoque;

    IF done THEN
      LEAVE read_loop;
    END IF;

    -- Faça algo com os dados, como imprimir na console
    SELECT CONCAT('Produto: ', nome_produto, ', Quantidade em Estoque: ', CAST(qtd_estoque AS CHAR)) AS 'Dados';
  END LOOP;

  CLOSE cur;
END//
DELIMITER ;